trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  projectPath: 'src/KinoDev.StorageService.WebApi/KinoDev.StorageService.WebApi.csproj'
  webAppName: '$(AZURE_WEBAPP_NAME)'

stages:
- stage: Build
  jobs:
  - job: BuildApp
    displayName: 'Build Application'
    steps:
    - task: UseDotNet@2
      displayName: 'Install .NET SDK'
      inputs:
        packageType: 'sdk'
        version: '8.0.x'

    - task: NuGetToolInstaller@1
      displayName: 'Install NuGet'

    - task: PowerShell@2
      displayName: 'Replace tokens in nuget.azure.config'
      env:
        GITHUB_USER_NAME: $(GITHUB_USER_NAME)
        GITHUB_READ_PACKAGE_TOKEN: $(GITHUB_READ_PACKAGE_TOKEN)
      inputs:
        targetType: 'inline'
        script: |
          (Get-Content -Path configs/nuget.azure.config) `
            -replace '\$env:GITHUB_USER_NAME', $env:GITHUB_USER_NAME `
            -replace '\$env:GITHUB_READ_PACKAGE_TOKEN', $env:GITHUB_READ_PACKAGE_TOKEN | `
            Set-Content -Path configs/nuget.azure.config

    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: 'restore'
        projects: '**/*.sln'  # or '**/*.csproj' if you prefer to target projects directly
        feedsToUse: 'config'
        # If you had custom feeds or config in the previous task, add them here:
        vstsFeed: 'config'
        nugetConfigPath: 'configs/nuget.azure.config'    

    - task: DotNetCoreCLI@2
      displayName: 'Build project'
      inputs:
        command: 'build'
        projects: '$(projectPath)'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    - task: DotNetCoreCLI@2
      displayName: 'Publish project'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '$(projectPath)'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/app --no-build'
        zipAfterPublish: true
        modifyOutputPath: false

    - task: PublishBuildArtifacts@1
      displayName: 'Publish build artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/app'
        ArtifactName: 'app'
        publishLocation: 'Container'

- stage: Deploy
  displayName: 'Deploy to Azure'
  environment: kinodev-live
  dependsOn: Build
  condition: succeeded('Build')
  jobs:
  - job: DeployToAzure
    displayName: 'Deploy to Azure WebApp'
    environment: kinodev-live
    strategy:
      runOnce:
        deploy:    
          steps:
          - task: DownloadBuildArtifacts@1
            displayName: 'Download build artifacts'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'app'
              downloadPath: '$(System.ArtifactsDirectory)'
              
          - task: AzureWebApp@1
            displayName: 'Deploy to Azure Web App'
            inputs:
              azureSubscription: '$(AZURE_SERVICE_CONNECTION)'
              appType: 'webApp'
              appName: '$(webAppName)'
              package: '$(System.ArtifactsDirectory)/app/*.zip'
              deploymentMethod: 'auto'
